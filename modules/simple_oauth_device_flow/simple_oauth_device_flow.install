<?php

/**
 * @file
 * Module file.
 */

declare(strict_types=1);

/**
 * @file
 * Install/uninstall functions for Simple OAuth Device Flow module.
 */

use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Database\Database;

/**
 * Implements hook_schema().
 */
function simple_oauth_device_flow_schema() {
  $schema = [];

  $schema['oauth2_device_code'] = [
    'description' => 'Stores OAuth 2.0 device codes for RFC 8628 device flow',
    'fields' => [
      'device_code' => [
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'description' => 'The device code identifier',
      ],
      'user_code' => [
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'description' => 'Human-readable user code',
      ],
      'client_id' => [
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'description' => 'OAuth client identifier',
      ],
      'user_id' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'description' => 'User ID once authorized',
      ],
      'authorized' => [
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'description' => 'Authorization status',
      ],
      'authorized_at' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Authorized timestamp',
      ],
      'created_at' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Creation timestamp',
      ],
      'expires_at' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Expiration timestamp',
      ],
      'last_polled_at' => [
        'type' => 'int',
        'description' => 'Last polling timestamp',
      ],
      'interval' => [
        'type' => 'int',
        'default' => 5,
        'description' => 'Polling interval in seconds',
      ],
      'langcode' => [
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => 'en',
        'description' => 'Language code',
      ],
    ],
    'primary key' => ['device_code'],
    'unique keys' => [
      'user_code' => ['user_code'],
    ],
    'indexes' => [
      'client_id' => ['client_id'],
      'expires_at' => ['expires_at'],
      'user_id' => ['user_id'],
    ],
  ];

  return $schema;
}

/**
 * Implements hook_install().
 */
function simple_oauth_device_flow_install($is_syncing) {
  if (!$is_syncing) {
    // Set default configuration values.
    $config = \Drupal::configFactory()->getEditable('simple_oauth_device_flow.settings');
    $config->setData([
      'device_code_lifetime' => 600,
      'user_code_length' => 8,
      'polling_interval' => 5,
      'verification_uri_complete_enabled' => TRUE,
    ]);
    $config->save();

    // Log successful installation.
    \Drupal::logger('simple_oauth_device_flow')->info('Simple OAuth Device Flow module installed successfully.');
  }
}

/**
 * Implements hook_uninstall().
 */
function simple_oauth_device_flow_uninstall($is_syncing) {
  if (!$is_syncing) {
    // Remove configuration.
    \Drupal::configFactory()->getEditable('simple_oauth_device_flow.settings')->delete();

    // Clean up any remaining device codes in the database.
    $connection = Database::getConnection();
    if ($connection->schema()->tableExists('oauth2_device_code')) {
      $connection->delete('oauth2_device_code')->execute();
    }

    // Log successful uninstallation.
    \Drupal::logger('simple_oauth_device_flow')->info('Simple OAuth Device Flow module uninstalled successfully.');
  }
}

/**
 * Implements hook_requirements().
 */
function simple_oauth_device_flow_requirements($phase) {
  $requirements = [];

  if ($phase === 'install' || $phase === 'runtime') {
    // Check if Simple OAuth is installed and enabled.
    if (!\Drupal::moduleHandler()->moduleExists('simple_oauth')) {
      $requirements['simple_oauth_device_flow_simple_oauth'] = [
        'title' => t('Simple OAuth Device Flow'),
        'description' => t('Simple OAuth Device Flow requires the Simple OAuth module to be installed and enabled.'),
        'severity' => REQUIREMENT_ERROR,
      ];
    }

    // Check if Consumers module is installed and enabled.
    if (!\Drupal::moduleHandler()->moduleExists('consumers')) {
      $requirements['simple_oauth_device_flow_consumers'] = [
        'title' => t('Simple OAuth Device Flow'),
        'description' => t('Simple OAuth Device Flow requires the Consumers module to be installed and enabled.'),
        'severity' => REQUIREMENT_ERROR,
      ];
    }

    // Check database schema during runtime.
    if ($phase === 'runtime') {
      $connection = Database::getConnection();
      if (!$connection->schema()->tableExists('oauth2_device_code')) {
        $requirements['simple_oauth_device_flow_schema'] = [
          'title' => t('Simple OAuth Device Flow'),
          'description' => t('The oauth2_device_code table is missing. Please reinstall the module.'),
          'severity' => REQUIREMENT_ERROR,
        ];
      }
      else {
        $requirements['simple_oauth_device_flow_schema'] = [
          'title' => t('Simple OAuth Device Flow'),
          'description' => t('Database schema is properly installed.'),
          'severity' => REQUIREMENT_OK,
        ];
      }

      // Check configuration exists.
      $config = \Drupal::config('simple_oauth_device_flow.settings');
      if ($config->isNew()) {
        $requirements['simple_oauth_device_flow_config'] = [
          'title' => t('Simple OAuth Device Flow'),
          'description' => t('Configuration is missing. Please reinstall the module.'),
          'severity' => REQUIREMENT_WARNING,
        ];
      }
      else {
        $requirements['simple_oauth_device_flow_config'] = [
          'title' => t('Simple OAuth Device Flow'),
          'description' => t('Configuration is properly installed.'),
          'severity' => REQUIREMENT_OK,
        ];
      }
    }
  }

  return $requirements;
}

/**
 * Update device code scopes field to use oauth2_scope_reference type.
 */
function simple_oauth_device_flow_update_11001() {
  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();

  // Get the current field storage definition.
  $field_storage_definition = $entity_definition_update_manager->getFieldStorageDefinition('scopes', 'oauth2_device_code');

  // Field storage definition doesn't exist yet - install it.
  if (!$field_storage_definition) {
    $field_definition = BaseFieldDefinition::create('oauth2_scope_reference')
      ->setLabel(t('Scopes'))
      ->setDescription(t('The scopes for this device code.'))
      ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
      ->setTranslatable(FALSE);

    $entity_definition_update_manager->installFieldStorageDefinition('scopes', 'oauth2_device_code', 'simple_oauth_device_flow', $field_definition);

    return t('Installed new oauth2_scope_reference field storage for device code scopes.');
  }

  // Field already exists but needs to be updated.
  $field_definition = BaseFieldDefinition::create('oauth2_scope_reference')
    ->setLabel(t('Scopes'))
    ->setDescription(t('The scopes for this device code.'))
    ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
    ->setTranslatable(FALSE);

  $entity_definition_update_manager->updateFieldStorageDefinition($field_definition);

  return t('Updated device code scopes field to use oauth2_scope_reference type.');
}

/**
 * Migrate existing device code scope data to oauth2_scope_reference field.
 */
function simple_oauth_device_flow_update_11002(&$sandbox) {
  $connection = \Drupal::database();
  $entity_type_manager = \Drupal::entityTypeManager();
  $logger = \Drupal::logger('simple_oauth_device_flow');

  // Initialize batch on first run.
  if (!isset($sandbox['current'])) {
    $sandbox['current'] = 0;
    $sandbox['max'] = $connection->query('SELECT COUNT(*) FROM {oauth2_device_code}')->fetchField();
    $sandbox['migrated'] = 0;
    $sandbox['skipped'] = 0;
    $sandbox['errors'] = 0;

    // Only proceed if there are records to migrate.
    if ($sandbox['max'] == 0) {
      $sandbox['#finished'] = 1;
      return t('No device codes to migrate.');
    }
  }

  // Process 50 records per batch.
  $batch_size = 50;

  // Query for device codes that have serialized scope data in the base table.
  $query = $connection->select('oauth2_device_code', 'd')
    ->fields('d', ['device_code', 'scopes'])
    ->range($sandbox['current'], $batch_size);

  $results = $query->execute();

  foreach ($results as $record) {
    $sandbox['current']++;

    // Skip if no scopes data.
    if (empty($record->scopes)) {
      $sandbox['skipped']++;
      continue;
    }

    try {
      // Unserialize the scope data safely.
      $serialized_scopes = @unserialize($record->scopes, ['allowed_classes' => FALSE]);

      // Skip if unserialization failed or result is not an array.
      if ($serialized_scopes === FALSE || !is_array($serialized_scopes)) {
        $logger->warning('Failed to unserialize scopes for device code @device_code', [
          '@device_code' => $record->device_code,
        ]);
        $sandbox['skipped']++;
        continue;
      }

      // Load the device code entity.
      $device_code_entity = $entity_type_manager->getStorage('oauth2_device_code')->load($record->device_code);

      if (!$device_code_entity) {
        $logger->warning('Device code entity not found: @device_code', [
          '@device_code' => $record->device_code,
        ]);
        $sandbox['skipped']++;
        continue;
      }

      // Clear existing scope references.
      $device_code_entity->set('scopes', []);

      // Load scope provider to verify scopes exist.
      $scope_provider = \Drupal::service('simple_oauth.oauth2_scope.provider');
      $available_scopes = $scope_provider->loadMultiple();
      $available_scope_ids = array_keys($available_scopes);

      // Add each scope to the entity.
      $added_scopes = 0;
      foreach ($serialized_scopes as $scope_id) {
        // Verify scope exists before adding.
        if (!in_array($scope_id, $available_scope_ids)) {
          $logger->warning('Scope @scope_id not found for device code @device_code. Skipping this scope.', [
            '@scope_id' => $scope_id,
            '@device_code' => $record->device_code,
          ]);
          continue;
        }

        // Add scope using appendItem.
        $device_code_entity->get('scopes')->appendItem(['scope_id' => $scope_id]);
        $added_scopes++;
      }

      // Save the entity.
      $device_code_entity->save();

      $sandbox['migrated']++;

      if ($added_scopes > 0) {
        $logger->info('Migrated @count scopes for device code @device_code', [
          '@count' => $added_scopes,
          '@device_code' => $record->device_code,
        ]);
      }
    }
    catch (\Exception $e) {
      $sandbox['errors']++;
      $logger->error('Error migrating device code @device_code: @message', [
        '@device_code' => $record->device_code,
        '@message' => $e->getMessage(),
      ]);
    }
  }

  // Update progress.
  $sandbox['#finished'] = $sandbox['current'] / $sandbox['max'];

  // Final message when complete.
  if ($sandbox['#finished'] >= 1) {
    return t('Migrated @migrated device codes. Skipped: @skipped. Errors: @errors.', [
      '@migrated' => $sandbox['migrated'],
      '@skipped' => $sandbox['skipped'],
      '@errors' => $sandbox['errors'],
    ]);
  }
}

/**
 * Remove the old scopes column from oauth2_device_code table.
 */
function simple_oauth_device_flow_update_11003() {
  $connection = \Drupal::database();
  $schema = $connection->schema();

  // Check if the scopes column exists before trying to drop it.
  if ($schema->fieldExists('oauth2_device_code', 'scopes')) {
    $schema->dropField('oauth2_device_code', 'scopes');
    return t('Removed old scopes column from oauth2_device_code table.');
  }

  return t('Old scopes column does not exist. No action needed.');
}
