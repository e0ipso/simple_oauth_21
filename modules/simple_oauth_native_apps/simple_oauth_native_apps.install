<?php

/**
 * @file
 * Install/uninstall functions for Simple OAuth Native Apps module.
 */

use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_install().
 */
function simple_oauth_native_apps_install($is_syncing) {
  if (!$is_syncing) {
    // Update the entity definition to include the new base fields.
    $entity_type_manager = \Drupal::entityTypeManager();
    $entity_type_manager->clearCachedDefinitions();

    // Update the Consumer entity type definition.
    $definition_update_manager = \Drupal::entityDefinitionUpdateManager();

    // Install the native_app_override field.
    if (!$definition_update_manager->getFieldStorageDefinition('native_app_override', 'consumer')) {
      $native_app_override = BaseFieldDefinition::create('list_string')
        ->setLabel(t('Native App Override'))
        ->setDescription(t('Manual override for native client detection. Leave empty for automatic detection.'))
        ->setRequired(FALSE)
        ->setSetting('allowed_values', [
          '' => '- Automatic detection -',
          '0' => 'Force as Web Client',
          '1' => 'Force as Native App',
        ])
        ->setDefaultValue('')
        ->setDisplayOptions('form', [
          'type' => 'options_select',
          'weight' => 10,
          'settings' => [],
        ])
        ->setDisplayOptions('view', [
          'type' => 'list_default',
          'label' => 'above',
          'weight' => 10,
        ])
        ->setDisplayConfigurable('form', TRUE)
        ->setDisplayConfigurable('view', TRUE);

      $definition_update_manager->installFieldStorageDefinition('native_app_override', 'consumer', 'simple_oauth_native_apps', $native_app_override);
    }

    // Install the native_app_enhanced_pkce field.
    if (!$definition_update_manager->getFieldStorageDefinition('native_app_enhanced_pkce', 'consumer')) {
      $native_app_enhanced_pkce = BaseFieldDefinition::create('list_string')
        ->setLabel(t('Enhanced PKCE'))
        ->setDescription(t('Override enhanced PKCE requirements for this client. Leave empty for automatic determination.'))
        ->setRequired(FALSE)
        ->setSetting('allowed_values', [
          '' => '- Automatic determination -',
          '0' => 'Disable Enhanced PKCE',
          '1' => 'Require Enhanced PKCE',
        ])
        ->setDefaultValue('')
        ->setDisplayOptions('form', [
          'type' => 'options_select',
          'weight' => 11,
          'settings' => [],
        ])
        ->setDisplayOptions('view', [
          'type' => 'list_default',
          'label' => 'above',
          'weight' => 11,
        ])
        ->setDisplayConfigurable('form', TRUE)
        ->setDisplayConfigurable('view', TRUE);

      $definition_update_manager->installFieldStorageDefinition('native_app_enhanced_pkce', 'consumer', 'simple_oauth_native_apps', $native_app_enhanced_pkce);
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function simple_oauth_native_apps_uninstall($is_syncing) {
  if (!$is_syncing) {
    $definition_update_manager = \Drupal::entityDefinitionUpdateManager();

    // Remove the native app override field.
    if ($field_storage_definition = $definition_update_manager->getFieldStorageDefinition('native_app_override', 'consumer')) {
      $definition_update_manager->uninstallFieldStorageDefinition($field_storage_definition);
    }

    // Remove the enhanced PKCE field.
    if ($field_storage_definition = $definition_update_manager->getFieldStorageDefinition('native_app_enhanced_pkce', 'consumer')) {
      $definition_update_manager->uninstallFieldStorageDefinition($field_storage_definition);
    }
  }
}

/**
 * Migrate configuration from flat structure to nested structure.
 */
function simple_oauth_native_apps_update_10001() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('simple_oauth_native_apps.settings');

  // Check if migration is needed by looking for new nested structure.
  if ($config->get('webview.detection') !== NULL) {
    // Already migrated.
    \Drupal::logger('simple_oauth_native_apps')->info('Configuration already uses nested structure. Skipping migration.');
    return t('Configuration already migrated. No changes needed.');
  }

  $migrated = [];
  $missing = [];

  // Define migration mapping from flat keys to nested structure.
  $migrations = [
    'webview_detection' => 'webview.detection',
    'webview_custom_message' => 'webview.custom_message',
    'webview_whitelist' => 'webview.whitelist',
    'webview_patterns' => 'webview.patterns',
    'allow_custom_uri_schemes' => 'allow.custom_uri_schemes',
    'allow_loopback_redirects' => 'allow.loopback_redirects',
    'enhanced_pkce_for_native' => 'native.enhanced_pkce',
    'enforce_method' => 'native.enforce',
  ];

  // Migrate each flat key to nested equivalent.
  foreach ($migrations as $old_key => $new_key) {
    $value = $config->get($old_key);

    if ($value !== NULL) {
      // Handle boolean to enum conversions.
      if ($old_key === 'allow_custom_uri_schemes' && is_bool($value)) {
        $value = $value ? 'native' : 'web';
      }
      elseif ($old_key === 'allow_loopback_redirects' && is_bool($value)) {
        $value = $value ? 'native' : 'web';
      }
      elseif ($old_key === 'enhanced_pkce_for_native' && is_bool($value)) {
        $value = $value ? 'enhanced' : 'not-enhanced';
      }

      $config->set($new_key, $value);
      $config->clear($old_key);
      $migrated[] = "$old_key â†’ $new_key";
    }
    else {
      $missing[] = $old_key;
    }
  }

  // Save migrated configuration.
  $config->save();

  // Log migration summary.
  $logger = \Drupal::logger('simple_oauth_native_apps');
  if (!empty($migrated)) {
    $logger->info('Configuration migration completed. Migrated: @migrated', [
      '@migrated' => implode(', ', $migrated),
    ]);
  }
  if (!empty($missing)) {
    $logger->info('Keys not found during migration (likely not set): @missing', [
      '@missing' => implode(', ', $missing),
    ]);
  }

  $message = t('Migrated @count configuration keys from flat to nested structure.', [
    '@count' => count($migrated),
  ]);

  return $message;
}
