<?php

/**
 * @file
 * Update functions for Simple OAuth Native Apps module.
 */

/**
 * Implements hook_install().
 */
function simple_oauth_native_apps_install(): void {
  // Install base field storage definitions for native app fields.
  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type_manager = \Drupal::entityTypeManager();

  // Get the consumer entity type definition.
  $consumer_entity_type = $entity_type_manager->getDefinition('consumer');

  // Get base field definitions from hook_entity_base_field_info().
  $base_fields = simple_oauth_native_apps_entity_base_field_info($consumer_entity_type);

  // Install each base field storage definition.
  foreach ($base_fields as $field_name => $storage_definition) {
    if (!$entity_definition_update_manager->getFieldStorageDefinition($field_name, 'consumer')) {
      $entity_definition_update_manager->installFieldStorageDefinition(
        $field_name,
        'consumer',
        'simple_oauth_native_apps',
        $storage_definition
      );
    }
  }
}

/**
 * Migrate configuration from flat structure to nested structure.
 */
function simple_oauth_native_apps_update_10001() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('simple_oauth_native_apps.settings');

  // Check if migration is needed by looking for new nested structure.
  if ($config->get('webview.detection') !== NULL) {
    // Already migrated.
    \Drupal::logger('simple_oauth_native_apps')->info('Configuration already uses nested structure. Skipping migration.');
    return t('Configuration already migrated. No changes needed.');
  }

  $migrated = [];
  $missing = [];

  // Define migration mapping from flat keys to nested structure.
  $migrations = [
    'webview_detection' => 'webview.detection',
    'webview_custom_message' => 'webview.custom_message',
    'webview_whitelist' => 'webview.whitelist',
    'webview_patterns' => 'webview.patterns',
    'allow_custom_uri_schemes' => 'allow.custom_uri_schemes',
    'allow_loopback_redirects' => 'allow.loopback_redirects',
    'enhanced_pkce_for_native' => 'native.enhanced_pkce',
    'enforce_method' => 'native.enforce',
  ];

  // Migrate each flat key to nested equivalent.
  foreach ($migrations as $old_key => $new_key) {
    $value = $config->get($old_key);

    if ($value !== NULL) {
      // Handle boolean to enum conversions.
      if ($old_key === 'allow_custom_uri_schemes' && is_bool($value)) {
        $value = $value ? 'native' : 'web';
      }
      elseif ($old_key === 'allow_loopback_redirects' && is_bool($value)) {
        $value = $value ? 'native' : 'web';
      }
      elseif ($old_key === 'enhanced_pkce_for_native' && is_bool($value)) {
        $value = $value ? 'enhanced' : 'not-enhanced';
      }

      $config->set($new_key, $value);
      $config->clear($old_key);
      $migrated[] = "$old_key â†’ $new_key";
    }
    else {
      $missing[] = $old_key;
    }
  }

  // Save migrated configuration.
  $config->save();

  // Log migration summary.
  $logger = \Drupal::logger('simple_oauth_native_apps');
  if (!empty($migrated)) {
    $logger->info('Configuration migration completed. Migrated: @migrated', [
      '@migrated' => implode(', ', $migrated),
    ]);
  }
  if (!empty($missing)) {
    $logger->info('Keys not found during migration (likely not set): @missing', [
      '@missing' => implode(', ', $missing),
    ]);
  }

  $message = t('Migrated @count configuration keys from flat to nested structure.', [
    '@count' => count($migrated),
  ]);

  return $message;
}

/**
 * Install base field storage definitions for native app fields.
 */
function simple_oauth_native_apps_update_10002() {
  // Install base field storage definitions for native app fields.
  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type_manager = \Drupal::entityTypeManager();

  // Get the consumer entity type definition.
  $consumer_entity_type = $entity_type_manager->getDefinition('consumer');

  // Get base field definitions from hook_entity_base_field_info().
  $base_fields = simple_oauth_native_apps_entity_base_field_info($consumer_entity_type);

  $installed = [];
  $skipped = [];

  // Install each base field storage definition.
  foreach ($base_fields as $field_name => $storage_definition) {
    if (!$entity_definition_update_manager->getFieldStorageDefinition($field_name, 'consumer')) {
      $entity_definition_update_manager->installFieldStorageDefinition(
        $field_name,
        'consumer',
        'simple_oauth_native_apps',
        $storage_definition
      );
      $installed[] = $field_name;
    }
    else {
      $skipped[] = $field_name;
    }
  }

  // Log installation summary.
  $logger = \Drupal::logger('simple_oauth_native_apps');
  if (!empty($installed)) {
    $logger->info('Base fields installed: @installed', [
      '@installed' => implode(', ', $installed),
    ]);
  }
  if (!empty($skipped)) {
    $logger->info('Base fields already exist (skipped): @skipped', [
      '@skipped' => implode(', ', $skipped),
    ]);
  }

  $message = t('Installed @count base field storage definitions.', [
    '@count' => count($installed),
  ]);

  return $message;
}
